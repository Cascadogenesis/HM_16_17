package Hm_17;

import java.util.List;

public interface SearchTree<T> {
    T find(T element);
    List<T> getSortedList();
}
package Hm_17;

import java.util.List;
import java.util.ArrayList;

public class hm<T extends Comparable<T>> implements SearchTree<T> {

    private TreeNode<T> root;

    private static class TreeNode<T> {
        T value;
        TreeNode<T> left, right;

        TreeNode(T value) {
            this.value = value;
            this.left = this.right = null;
        }
    }

    public hm(List<T> sortedList) {
        this.root = buildTree(sortedList, 0, sortedList.size() - 1);
    }

    private TreeNode<T> buildTree(List<T> sortedList, int start, int end) {
        if (start > end) {
            return null;
        }

        int mid = (start + end) / 2;
        TreeNode<T> node = new TreeNode<>(sortedList.get(mid));
        node.left = buildTree(sortedList, start, mid - 1);
        node.right = buildTree(sortedList, mid + 1, end);

        return node;
    }

    @Override
    public T find(T element) {
        return findRecursive(root, element);
    }

    private T findRecursive(TreeNode<T> node, T element) {
        if (node == null) {
            return null;
        }
        int cmp = element.compareTo(node.value);
        if (cmp < 0) {
            return findRecursive(node.left, element);
        } else if (cmp > 0) {
            return findRecursive(node.right, element);
        } else {
            return node.value;
        }
    }

    @Override
    public List<T> getSortedList() {
        List<T> sortedList = new ArrayList<>();
        inorderTraversal(root, sortedList);
        return sortedList;
    }

    private void inorderTraversal(TreeNode<T> node, List<T> list) {
        if (node == null) {
            return;
        }
        inorderTraversal(node.left, list);
        list.add(node.value);
        inorderTraversal(node.right, list);
    }

    public static void main(String[] args) {
        List<Integer> sortedList = List.of(1, 2, 3, 4, 5, 6, 7);
        hm<Integer> tree = new hm<>(sortedList);

        Integer result = tree.find(4);
        System.out.println(result);

        List<Integer> sorted = tree.getSortedList();
        System.out.println(sorted);
    }
}
